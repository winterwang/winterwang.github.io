<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R techniques on Be ambitious</title>
    <link>https://winterwang.github.io/categories/r-techniques/</link>
    <description>Recent content in R techniques on Be ambitious</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Chaochen Wang | 王超辰</copyright>
    <lastBuildDate>Sun, 27 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://winterwang.github.io/categories/r-techniques/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rstan Wonderful R-(4)</title>
      <link>https://winterwang.github.io/post/logistic-rstan/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://winterwang.github.io/post/logistic-rstan/</guid>
      <description>邏輯回歸模型的 Rstan 貝葉斯實現 本小節使用的數據，和前一節的出勤率數據很類似:
d &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/winterwang/RStanBook/master/chap05/input/data-attendance-2.txt&amp;quot;, sep = &amp;quot;,&amp;quot;, header = T) head(d) ## PersonID A Score M Y ## 1 1 0 69 43 38 ## 2 2 1 145 56 40 ## 3 3 0 125 32 24 ## 4 4 1 86 45 33 ## 5 5 1 158 33 23 ## 6 6 0 133 61 60 其中，
 PersonID: 是學生的編號； A, Score: 和之前一樣用來預測出勤率的兩個預測變量，分別是表示是否喜歡打工的 A，和表示對學習本身是否喜歡的評分 (滿分200)； M: 過去三個月內，該名學生一共需要上課的總課時數； Y: 過去三個月內，該名學生實際上出勤的課時數。   確定分析目的 需要回答的問題依然是，\(A, Score\) 分別在多大程度上預測學生的出勤率？另外，我們希望知道的是，當需要修的課時數固定的事後，這兩個預測變量能準確提供 \(Y\) 的多少信息？</description>
    </item>
    
    <item>
      <title>Rstan Wonderful R-(3)</title>
      <link>https://winterwang.github.io/post/rstan-wonderful-r3/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://winterwang.github.io/post/rstan-wonderful-r3/</guid>
      <description>多重回歸 multiple regression 本章使用的數據，大學生出勤記錄也是架空的數據。
有大學記錄了50名大學生的出勤狀況：
A,Score,Y 0,69,0.286 1,145,0.196 0,125,0.261 1,86,0.109 1,158,0.23 0,133,0.35 0,111,0.33 1,147,0.194 0,146,0.413 0,145,0.36 1,141,0.225 0,137,0.423 1,118,0.186 0,111,0.287 ... 0,99,0.268 1,99,0.234 其中，
 \(A\): 是學生大學二年級時進行的問卷調查時回答是否喜歡打零工的結果（0:不喜歡打工；1:喜歡打工） \(Score\): 是大學二年級時進行的問卷調查時計算的該學生對學習是否感興趣的數值評分(200分滿分，分數越高，該學生越熱愛學習) \(Y\): 是該學生一年內的出勤率  在本次分析範例中，把\(Y\)出勤率當作是連續型結果變量，我們來用Stan實施多重回歸分析，回答學生喜歡打零工與否，和學生對學習的熱情程度兩個變量能解釋多少出勤率。
Step 1. 確認數據分佈 # The following figure codes come from the authors website: # https://github.com/MatsuuraKentaro/RStanBook/blob/master/chap05/fig5-1.R library(ggplot2) library(GGally) set.seed(123) d &amp;lt;- read.csv(file=&amp;#39;https://raw.githubusercontent.com/winterwang/RStanBook/master/chap05/input/data-attendance-1.txt&amp;#39;, header = T) d$A &amp;lt;- as.factor(d$A) N_col &amp;lt;- ncol(d) ggp &amp;lt;- ggpairs(d, upper=&amp;#39;blank&amp;#39;, diag=&amp;#39;blank&amp;#39;, lower=&amp;#39;blank&amp;#39;) for(i in 1:N_col) { x &amp;lt;- d[,i] p &amp;lt;- ggplot(data.</description>
    </item>
    
    <item>
      <title>Simple linear regression using Rstan--Rstan Wonderful R-(2)</title>
      <link>https://winterwang.github.io/post/simple-linear-regression-using-rstan/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://winterwang.github.io/post/simple-linear-regression-using-rstan/</guid>
      <description>數據 data-salary.txt是架空的。
某公司社員的年齡 \(X\)（歲），和年收入 \(Y\)（萬日元）的數據如下：
X,Y 24,472 24,403 26,454 32,575 33,546 35,781 38,750 40,601 40,814 43,792 43,745 44,837 48,868 52,988 56,1092 56,1007 57,1233 58,1202 59,1123 59,1314  年收入 \(Y\) 被認爲是由基本年收 \(y_{base}\) 和其他影響因素 \(\varepsilon\) 構成。由於該公司是典型的年功序列式的日本傳統企業，所以基本年收本身和社員年齡成正比例。 \(\varepsilon\) 則被認爲是由該員工當年的業績等隨機誤差造成的，但是所有員工的 \(\varepsilon\) 的均值被認爲是零。
g分析目的：
 借用這個數據來分析並回答如下的問題：在該公司如果採用了一名50歲的員工，他/她的年收入的預期值會是多少。  Step 1, 確認數據分佈 Salary &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/winterwang/RStanBook/master/chap04/input/data-salary.txt&amp;quot;, sep = &amp;quot;,&amp;quot;, header = T) library(ggplot2) ggplot(Salary, aes(x = X, y = Y)) + geom_point(shape = 1, size = 4) + theme(plot.</description>
    </item>
    
    <item>
      <title>Rstan Wonderful R-(1)</title>
      <link>https://winterwang.github.io/post/rstan-wonderful-r/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://winterwang.github.io/post/rstan-wonderful-r/</guid>
      <description>P16
事後分布 \(p(\theta | Y)\)の値が最大になる点\(\theta^*\)を事後確率最大推定値 (maximum a posteriori estimate)と呼ぶ．略してMAP推定値 (MAP estimate)．
我們把能夠將事後概率分布取極大值的參數點 \(\theta^*\) 稱爲事後概率的最大似然估計值 (maximum a posteriori estimate)，簡稱 MAP估計值 (MAP estimate)。
P19
統計建模的一般順序
 確定分析目的 確定數據分布 想象數據產生本身的機制：思考數據與數據之間可能的關系 寫下你所認爲的數據模型的數學表達式 用 R 模擬(simulation)並確認前一步寫下的數學模型的性質，特點 用 Stan 實際進行模型參數的推斷 獲得推斷結果，解釋其事後概率分布的意義，繪制易於理解的模型示意圖 繪制成功之後的模型示意圖和最先使用的模型之間進行比對，重新查缺補漏  P23
ただいたずらにモデルを複雑化させるのは解釈のしにくさを招く．
P30
最初にmodel ブロックの尤度の部分（と事前分布の部分）を書く．その尤度の部分に登場した変数のうち，データの変数をdataブロックに，残りの変数をparametersブロックに書いていく．
Stan的基本文法構成
data { 數據描述 } parameters { 想要進行MCMC事後樣本採集的參數描述 } model { p(Y|theta) 似然的描述 先驗概率分布 p(theta) 的描述 } 把下面的模型
\[ \begin{aligned} Y[n] &amp;amp; \sim \text{Normal}(\mu, 1) \;\; n = 1, \dots, N \\ \mu &amp;amp; \sim \text{Normal}(0, 100) \end{aligned} \]</description>
    </item>
    
    <item>
      <title>rMaps: 超級酷的地圖</title>
      <link>https://winterwang.github.io/post/2016-05-31-rmaps/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://winterwang.github.io/post/2016-05-31-rmaps/</guid>
      <description>今日仰視slidify作者Ramnath Vaidyanathan的github頁面發現超酷的rMaps包，抄過來在自己電腦上實驗一下。
下載  require(devtools) install_github(&#39;ramnathv/rCharts@dev&#39;) install_github(&#39;ramnathv/rMaps&#39;)  繪制美國2010年的各州的犯罪率 Crime Rates (per 100,000) by State at 2010  利用以下的R編碼在Rstudio裏實現上圖效果
 library(rMaps) map &amp;lt;- ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010)) map map$publish(&amp;quot;Crime Rates (per 100, 000) by State across Years&amp;quot;) # &amp;lt;- 引號中的將會是生成的動態地圖的網頁名稱 ## Loading required package: httr ## Please enter your github username: ***** # &amp;lt;- 在此處輸入你自己的github用戶名 ## Please enter your github password: ***** # &amp;lt;- 在此輸入你自己的github用戶密碼 ## Your gist has been published ## View chart at http://rcharts.</description>
    </item>
    
  </channel>
</rss>